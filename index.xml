<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fly away, chase dream</title>
    <link>/</link>
    <description>Recent content on fly away, chase dream</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 25 Dec 2020 15:27:39 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Yolo-v5从代码到服务部署实践</title>
      <link>/post/yolo_v5%E4%BB%8E%E7%90%86%E8%AE%BA%E5%88%B0%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Fri, 25 Dec 2020 15:27:39 +0800</pubDate>
      
      <guid>/post/yolo_v5%E4%BB%8E%E7%90%86%E8%AE%BA%E5%88%B0%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E5%AE%9E%E8%B7%B5/</guid>
      <description>yolo-v5 非论文，仅工程实现。本文主要记录自己对yolo-v5代码的学习、理解，以及实际服务部署。 网络结构 yolo-v5 包含4种模型结构，分别是yolov5s、</description>
    </item>
    
    <item>
      <title>PP-Ocr阅读小结</title>
      <link>/post/pp-ocr%E9%98%85%E8%AF%BB%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Wed, 11 Nov 2020 22:14:40 +0800</pubDate>
      
      <guid>/post/pp-ocr%E9%98%85%E8%AF%BB%E5%B0%8F%E7%BB%93/</guid>
      <description>PP-OCR 是百度基于paddlePaddle 框架开源的国产高质量的OCR系统，PP-OCR 论文主要对其中使用的技术作了介绍。本文对PP-OCR 作阅读</description>
    </item>
    
    <item>
      <title>使用nginx实现服务反向代理实现负载均衡</title>
      <link>/post/%E4%BD%BF%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link>
      <pubDate>Tue, 06 Oct 2020 14:10:30 +0800</pubDate>
      
      <guid>/post/%E4%BD%BF%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid>
      <description>对外提供网络接口服务，当单机容量达到极限时，可以从业务拆分和分布式部署两个方面进行分析，来解决接口访问量大，并发量高，海量数据的问题。从单机</description>
    </item>
    
    <item>
      <title>Dbnet</title>
      <link>/post/dbnet/</link>
      <pubDate>Mon, 03 Aug 2020 21:35:33 +0800</pubDate>
      
      <guid>/post/dbnet/</guid>
      <description>DBNet：Real-time Scene Text Detection with Differentiable Binarization，是一个基于分割的文本检测器，PPOCR中使用其作为检测器，取得了可观的效果</description>
    </item>
    
    <item>
      <title>CSPNet</title>
      <link>/post/cspnet/</link>
      <pubDate>Sun, 26 Jul 2020 22:46:55 +0800</pubDate>
      
      <guid>/post/cspnet/</guid>
      <description>CSPNet出至论文：CSPNet: A New Backbone that can Enhance Learning Capability of CNN, 近来yolo-v4,yolo-v5都使用其作为主干网络的结构，其主要用于降低计算量的</description>
    </item>
    
    <item>
      <title>Tensorflow pb模型可视化</title>
      <link>/wiki/tensorflow_pb_%E5%8F%AF%E8%A7%86%E5%8C%96/</link>
      <pubDate>Mon, 01 Jun 2020 21:01:10 +0800</pubDate>
      
      <guid>/wiki/tensorflow_pb_%E5%8F%AF%E8%A7%86%E5%8C%96/</guid>
      <description>新建 log 文件夹 执行以下代码 import tensorflow as tf from tensorflow.python.platform import gfile model = &#39;model.pb&#39; graph = tf.get_default_graph() graph_def = graph.as_graph_def() graph_def.ParseFromString(gfile.FastGFile(model, &#39;rb&#39;).read()) tf.import_graph_def(graph_def, name=&#39;graph&#39;) summaryWriter = tf.summary.FileWriter(&#39;log/&#39;, graph) 在log文件夹上一层执行 tensorboard &amp;ndash;logdir log，浏览器访问即可</description>
    </item>
    
    <item>
      <title>CBAM注意力模块: Convolutional Block Attention Module</title>
      <link>/post/cbam%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Mon, 11 May 2020 11:27:35 +0800</pubDate>
      
      <guid>/post/cbam%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%A8%A1%E5%9D%97/</guid>
      <description>之前谈过SE-net, 对于目标检测或检测用于特征通道的attention, 今天记录一下CBAM模块, 对分类或检测中用来获取通道、空间位置的a</description>
    </item>
    
    <item>
      <title>Image Caption模型</title>
      <link>/post/image_caption_1/</link>
      <pubDate>Sun, 03 May 2020 16:23:18 +0800</pubDate>
      
      <guid>/post/image_caption_1/</guid>
      <description>图像描述生成作为结合CV与NLP的跨模态学习任务, 在人工智能领域也是热门的研究点. 模型 Image caption 是在给定照片的情况下生成人类可读的文字描述的具有挑</description>
    </item>
    
    <item>
      <title>Seq2Seq模型: 从理论到实践(二)</title>
      <link>/post/seq2seq%E6%A8%A1%E5%9E%8B_%E4%BB%8E%E7%90%86%E8%AE%BA%E5%88%B0%E5%AE%9E%E8%B7%B5_%E4%BA%8C/</link>
      <pubDate>Sat, 02 May 2020 17:03:16 +0800</pubDate>
      
      <guid>/post/seq2seq%E6%A8%A1%E5%9E%8B_%E4%BB%8E%E7%90%86%E8%AE%BA%E5%88%B0%E5%AE%9E%E8%B7%B5_%E4%BA%8C/</guid>
      <description>本文图片、代码来源于pytorch-se12seq, 加深个人理解 在上文中使用的编码器-解码器结构如下: （一）信息压缩问题 对于上诉的解码器而言</description>
    </item>
    
    <item>
      <title>Seq2Seq模型: 从理论到实践(一)</title>
      <link>/post/seq2seq%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 01 May 2020 17:31:29 +0800</pubDate>
      
      <guid>/post/seq2seq%E6%A8%A1%E5%9E%8B/</guid>
      <description>理论结合实践是学习的最佳方式, 本文图片、代码来源于pytorch-seq2seq Seq2Seq 模型 对于序列预测, RNN及其变种LSTM、GRU等无疑是最</description>
    </item>
    
    <item>
      <title>Pytorch: CRNN 实践</title>
      <link>/post/pytorch_crnn%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 30 Apr 2020 16:49:49 +0800</pubDate>
      
      <guid>/post/pytorch_crnn%E5%AE%9E%E8%B7%B5/</guid>
      <description>最近开始深入OCR这块, 以前倒是训练过开源的Keras-CRNN, 但是它和原文还是不一样, 今天参照Keras-CRNN代码和CRNN论文用p</description>
    </item>
    
    <item>
      <title>文本检测中的nms</title>
      <link>/post/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B%E4%B8%AD%E7%9A%84nms/</link>
      <pubDate>Wed, 29 Apr 2020 17:20:52 +0800</pubDate>
      
      <guid>/post/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B%E4%B8%AD%E7%9A%84nms/</guid>
      <description>今天被问到了OCR相关的NMS，个人一直偏向于通用目标检测的NMS，正好补补课，扩展一下OCR方向的知识. 对通用目标检测或者人脸检测等得到的</description>
    </item>
    
    <item>
      <title>YOLOv4: Optimal Speed and Accuracy of Object Detection论文解读</title>
      <link>/post/yolov4/</link>
      <pubDate>Tue, 28 Apr 2020 23:37:42 +0800</pubDate>
      
      <guid>/post/yolov4/</guid>
      <description>最近目标检测又出了yolo-v4，作为一个做目标检测的不可不膜拜膜拜。首先由于约瑟夫大神已经退出CV，yolo-v4 的一作是DarkNet的</description>
    </item>
    
    <item>
      <title>目标检测IOU评价指标汇总: GIOU, DIOU, CIOU</title>
      <link>/post/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8Biou%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87%E6%B1%87%E6%80%BB/</link>
      <pubDate>Fri, 24 Apr 2020 23:18:06 +0800</pubDate>
      
      <guid>/post/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8Biou%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87%E6%B1%87%E6%80%BB/</guid>
      <description>在目标检测中, IOU 可以被用来评估预测框的性能，IOU越大预测框越准。IOU可表示两个框的距离，IOU越大距离越小. 对于目标检测坐标损失虽然一般</description>
    </item>
    
    <item>
      <title>谷歌最新目标检测论文: EfficientDet</title>
      <link>/post/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8Beffcientdet/</link>
      <pubDate>Sat, 18 Apr 2020 11:55:48 +0800</pubDate>
      
      <guid>/post/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8Beffcientdet/</guid>
      <description>最近谷歌放出了 EfficientDet 论文与代码, 在COCO上取得了最好的MAP, 本文对 efficientDet 做个简要的总结, 同时对efficientNet也做个回顾. Efficie</description>
    </item>
    
    <item>
      <title>基于内容的图像检索: pytorch</title>
      <link>/post/%E5%9F%BA%E4%BA%8Epytorch%E7%9A%84cbir_demo/</link>
      <pubDate>Fri, 17 Apr 2020 16:33:21 +0800</pubDate>
      
      <guid>/post/%E5%9F%BA%E4%BA%8Epytorch%E7%9A%84cbir_demo/</guid>
      <description>看了Jason Brownlee博士的Keras CBIR demo, 自己也动手用pytorch写一个. CBIR CBIR 为基于内容的图像检索. 用于在图像数据数据库上检索具有</description>
    </item>
    
    <item>
      <title>超分辨率重建: SRGAN</title>
      <link>/post/srgan/</link>
      <pubDate>Sun, 12 Apr 2020 19:41:57 +0800</pubDate>
      
      <guid>/post/srgan/</guid>
      <description>对于图像超分辨率重建, 第一个使用CNN实现的是SRCNN, 类似于编码器解码器结构. SRGAN是第一个使用GAN网络解决超分辨率重构的网络 创新</description>
    </item>
    
    <item>
      <title>语义分割: UNET</title>
      <link>/post/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2unet/</link>
      <pubDate>Fri, 10 Apr 2020 23:11:46 +0800</pubDate>
      
      <guid>/post/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2unet/</guid>
      <description>说到语义分割, 不得不说一下U-net, U-net首先针对于医学图像分割提出, 由于其卓越的性能, 目前大部分医学图像分割都是基于U-net或者U</description>
    </item>
    
    <item>
      <title>语义分割: deeplab V1到deeplab V3</title>
      <link>/post/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2deeplab-v1%E5%88%B0deeplab-v3/</link>
      <pubDate>Fri, 10 Apr 2020 23:11:32 +0800</pubDate>
      
      <guid>/post/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2deeplab-v1%E5%88%B0deeplab-v3/</guid>
      <description>deeplab 为一个系列, 因此将其放在一起进行个回顾 Deeplab-v1 与deeplab-v2 将deeplab-v1与deeplab-v2放在一起, 主要是因为二者总体结构</description>
    </item>
    
    <item>
      <title>语义分割之: FCN</title>
      <link>/post/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2fcn/</link>
      <pubDate>Fri, 10 Apr 2020 23:11:05 +0800</pubDate>
      
      <guid>/post/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2fcn/</guid>
      <description>研究生阶段自己对分割这边还是很熟悉的, 工作后发现很多网络只能说出原理和整体框架, 面试时问的很细节, 再次将经典分割网络仔细review一遍. 主</description>
    </item>
    
    <item>
      <title>Leetcode:1038</title>
      <link>/leetcode/leetcode1038.%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%88%B0%E6%9B%B4%E5%A4%A7%E5%92%8C%E6%A0%91/</link>
      <pubDate>Tue, 07 Apr 2020 21:02:42 +0800</pubDate>
      
      <guid>/leetcode/leetcode1038.%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%88%B0%E6%9B%B4%E5%A4%A7%E5%92%8C%E6%A0%91/</guid>
      <description>给出二叉 搜索 树的根节点，该二叉树的节点值各不相同，修改二叉树，使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。 提醒一下，二叉搜索树满足下列</description>
    </item>
    
    <item>
      <title>人脸检测网络: MTCNN</title>
      <link>/post/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9Cmtcnn/</link>
      <pubDate>Sat, 04 Apr 2020 18:03:03 +0800</pubDate>
      
      <guid>/post/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9Cmtcnn/</guid>
      <description>之前做人脸检测使用的是retinaface做的, 刚好最近被问到MTCNN, 以前没有细看, 正好做个笔记. MTCNN是2015年提出的用于人脸检</description>
    </item>
    
    <item>
      <title>图像去雾: Single Image Haze Removal Using Dark Channel Prior</title>
      <link>/post/%E6%9A%97%E9%80%9A%E9%81%93%E5%8E%BB%E9%9B%BEsingle_image_haze_he/</link>
      <pubDate>Fri, 03 Apr 2020 15:04:06 +0800</pubDate>
      
      <guid>/post/%E6%9A%97%E9%80%9A%E9%81%93%E5%8E%BB%E9%9B%BEsingle_image_haze_he/</guid>
      <description>此论文是何凯明博士在2009CVPR上的发表的论文, 在图像增强领域可谓无人不知. 论文的方法主要基于对无雾室外图像的统计. 本文主要对原文以及参</description>
    </item>
    
    <item>
      <title>Excel列表字母数字转换</title>
      <link>/leetcode/excel%E5%88%97%E8%A1%A8%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 03 Apr 2020 12:55:05 +0800</pubDate>
      
      <guid>/leetcode/excel%E5%88%97%E8%A1%A8%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/</guid>
      <description>给定一个Excel表格中的列名称，返回其相应的列序号 例如， A -&amp;gt; 1 B -&amp;gt; 2 C -&amp;gt; 3 ... Z -&amp;gt; 26 AA -&amp;gt; 27 AB -&amp;gt; 28 ... 26进制 int titleToNumber(string s) { if(s.size()==0) return 0; int len = s.size(); int res =0; for(int i=0; i&amp;lt;len;i++){</description>
    </item>
    
    <item>
      <title>数组中第K个最大元素</title>
      <link>/leetcode/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</link>
      <pubDate>Wed, 01 Apr 2020 23:21:59 +0800</pubDate>
      
      <guid>/leetcode/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</guid>
      <description>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素 快排思想, 每次取一个划分位置,</description>
    </item>
    
    <item>
      <title>二叉树的最近邻祖先节点</title>
      <link>/leetcode/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E9%82%BB%E7%A5%96%E5%85%88%E8%8A%82%E7%82%B9/</link>
      <pubDate>Wed, 01 Apr 2020 20:32:36 +0800</pubDate>
      
      <guid>/leetcode/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E9%82%BB%E7%A5%96%E5%85%88%E8%8A%82%E7%82%B9/</guid>
      <description>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。 二叉搜索树的性质, 父节点大于左节点小于右节点, 如果两个节点一个大于父节点的值一个小</description>
    </item>
    
    <item>
      <title>数组最大连续和</title>
      <link>/leetcode/%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%92%8C/</link>
      <pubDate>Wed, 01 Apr 2020 17:34:10 +0800</pubDate>
      
      <guid>/leetcode/%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%92%8C/</guid>
      <description>给一个数组, 其中元素有正有负, 求数组的连续最大和. 最直观的暴力法可解. 但不可行. 用两个数记录当前和以及当前最大值, 当当前和《=0时, 将当前和</description>
    </item>
    
    <item>
      <title>Three-sum</title>
      <link>/leetcode/three_sum/</link>
      <pubDate>Wed, 01 Apr 2020 17:04:12 +0800</pubDate>
      
      <guid>/leetcode/three_sum/</guid>
      <description>Three sum 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。 注意：</description>
    </item>
    
    <item>
      <title>最长公共前缀</title>
      <link>/leetcode/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</link>
      <pubDate>Wed, 01 Apr 2020 13:53:38 +0800</pubDate>
      
      <guid>/leetcode/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</guid>
      <description>编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 &amp;ldquo;&amp;ldquo;。 每次对比两个串, 一旦不相等就跳出</description>
    </item>
    
    <item>
      <title>字符串转整数</title>
      <link>/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B4%E6%95%B0/</link>
      <pubDate>Wed, 01 Apr 2020 12:49:40 +0800</pubDate>
      
      <guid>/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B4%E6%95%B0/</guid>
      <description>请你来实现一个 atoi 函数，使其能将字符串转换成整数。 首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。 当我们寻找到</description>
    </item>
    
    <item>
      <title>链表相加</title>
      <link>/leetcode/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%8A%A0/</link>
      <pubDate>Wed, 01 Apr 2020 00:58:17 +0800</pubDate>
      
      <guid>/leetcode/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%8A%A0/</guid>
      <description>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字, 返回新的链表 ListNode* twoListSum(ListNode* l1,</description>
    </item>
    
    <item>
      <title>数字反转</title>
      <link>/leetcode/%E6%95%B0%E5%AD%97%E5%8F%8D%E8%BD%AC/</link>
      <pubDate>Wed, 01 Apr 2020 00:54:21 +0800</pubDate>
      
      <guid>/leetcode/%E6%95%B0%E5%AD%97%E5%8F%8D%E8%BD%AC/</guid>
      <description>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。 超过32为的最大整数, 返回0 用long型来标记溢出, 利用如果溢出long转</description>
    </item>
    
    <item>
      <title>用rand5模拟rand7</title>
      <link>/leetcode/%E7%94%A8rand5%E6%A8%A1%E6%8B%9Frand7/</link>
      <pubDate>Mon, 30 Mar 2020 23:36:49 +0800</pubDate>
      
      <guid>/leetcode/%E7%94%A8rand5%E6%A8%A1%E6%8B%9Frand7/</guid>
      <description>rand5 函数可以等概率随机产生1-5五个数, 要求用 rand5 模拟出rand7. 考虑以rand7 实现rand5 def rand5(): res=6 while(res&amp;gt;5): res=random.randint(1,7) return res 验证是否生成的数字是等概率生成1</description>
    </item>
    
    <item>
      <title>旋转数组最小数字</title>
      <link>/leetcode/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</link>
      <pubDate>Mon, 30 Mar 2020 22:35:00 +0800</pubDate>
      
      <guid>/leetcode/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</guid>
      <description>给定一个一个排序数组, 将前端部分数字放到数组尾部, 求出数组中的最小数字, [4,5,6,1,2,3] 返回1. 对于有序数组, 考虑使用二分查找法. 当 arr[mid] &amp;gt; arr[high] 时, 最小值必在【</description>
    </item>
    
    <item>
      <title>动态规划集合</title>
      <link>/leetcode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%9B%86%E5%90%88/</link>
      <pubDate>Sat, 28 Mar 2020 22:16:54 +0800</pubDate>
      
      <guid>/leetcode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%9B%86%E5%90%88/</guid>
      <description>动态规划,提起来就头大┭┮﹏┭┮, 以本文记录常考的动态规划算法 在问题满足动态规划求解的时候, 动态规划主要靠维护一个数组来记录状态转移值, 只要</description>
    </item>
    
    <item>
      <title>数组中数字出现的次数</title>
      <link>/leetcode/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</link>
      <pubDate>Fri, 27 Mar 2020 18:20:03 +0800</pubDate>
      
      <guid>/leetcode/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</guid>
      <description>给定一个数组, 假设其中有两个数只出现了一次, 其它均出现了两次, 让找出只出现了一次的两个数字. 对于数字出现次数, 可从异或角度出发. 当数组中只有</description>
    </item>
    
    <item>
      <title>字符串全排列</title>
      <link>/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%85%A8%E6%8E%92%E5%88%97/</link>
      <pubDate>Fri, 27 Mar 2020 15:16:15 +0800</pubDate>
      
      <guid>/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%85%A8%E6%8E%92%E5%88%97/</guid>
      <description>给定字符串, 输出或统计全排列个数. 并去重 void judge(char* p, char* P1){ while(p&amp;lt;p1){ if(*p==*p1) return true; } return false; } void permutation(char* orig, char* ind_cur){ if(*ind_cur==&#39;\0&#39;) cout&amp;lt;&amp;lt;orig&amp;lt;&amp;lt;endl; else{ for(char* p=ind_cur;p!=&#39;\0&#39;;p++){ if(judge(ind_cur, p)) continue; char temp = *p; *p=*ind_cur; *ind_cur=temp; permutation(orig, ind_cur+1); temp=*p; *p=*ind_cur; *ind_cur=temp; } } } void permutation(char* str){ if(str==nullptr) return; permutation(str,str); }</description>
    </item>
    
    <item>
      <title>二叉树</title>
      <link>/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Wed, 25 Mar 2020 18:39:38 +0800</pubDate>
      
      <guid>/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>树节点 struct TreeNode{ int val; TreeNode * left, * right; TreeNode(int val){ this-&amp;gt;val = val; this-&amp;gt;left=nullptr; this-&amp;gt;right= nullptr; } }; 二叉树前中后序遍历递归非递归 // 递归实现 void pre_order(TreeNode * head){ if(head==nullptr) return; cout&amp;lt;&amp;lt;head-&amp;gt;val&amp;lt;&amp;lt;endl; if(head-&amp;gt;left) pre_order(head-&amp;gt;left); if(head-&amp;gt;right) pre_order(head-&amp;gt;right); } void in_order(TreeNode * head){ if(head-&amp;gt;left) in_order(head-&amp;gt;left); cout&amp;lt;&amp;lt;head-&amp;gt;val&amp;lt;&amp;lt;endl; if(head-&amp;gt;right) in_order(head-&amp;gt;right); } void post_order(TreeNode * head){ if(head-&amp;gt;left) post_order(head-&amp;gt;left); if(head-&amp;gt;right)</description>
    </item>
    
    <item>
      <title>堆排序以及topk问题</title>
      <link>/leetcode/%E5%A0%86%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 25 Mar 2020 15:10:37 +0800</pubDate>
      
      <guid>/leetcode/%E5%A0%86%E6%8E%92%E5%BA%8F/</guid>
      <description>大根堆排序流程: 建堆, 构建二叉树, 父节点均大于子节点 将堆首元素与堆尾元素交换 重新调整堆, 不包含堆尾元素 void adjustHeap(std::vector&amp;lt;int&amp;gt; &amp;amp;arr, int p_ind, int size){ int l_child = 2 * p_ind + 1; while(l_child &amp;lt; size){ if(l_child</description>
    </item>
    
    <item>
      <title>沁园春.雪</title>
      <link>/life/%E6%B2%81%E5%9B%AD%E6%98%A5-%E9%9B%AA/</link>
      <pubDate>Wed, 18 Mar 2020 09:03:55 +0800</pubDate>
      
      <guid>/life/%E6%B2%81%E5%9B%AD%E6%98%A5-%E9%9B%AA/</guid>
      <description>沁园春.雪 毛泽东 北国风光，千里冰封，万里雪飘。 望长城内外，惟余莽莽；大河上下，顿失滔滔。 山舞银蛇，原驰蜡象，欲与天公试比高。 须晴日，看红装素</description>
    </item>
    
    <item>
      <title>长相思</title>
      <link>/life/%E9%95%BF%E7%9B%B8%E6%80%9D/</link>
      <pubDate>Tue, 17 Mar 2020 09:56:41 +0800</pubDate>
      
      <guid>/life/%E9%95%BF%E7%9B%B8%E6%80%9D/</guid>
      <description>长相思 李白 长相思, 在长安 络纬秋啼金井阑 微霜凄凄簟色寒 孤灯不明思欲绝 卷帷望月空长叹 美人如花隔云端 上有青冥之高天 下有渌水之波澜 天长路远魂飞苦 梦魂</description>
    </item>
    
    <item>
      <title>Anchor free目标检测修炼之路:fcos -Fully Convolutional One-Stage Object Detection</title>
      <link>/post/anchor_free%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%BF%AE%E7%82%BC%E4%B9%8B%E8%B7%AFfcos/</link>
      <pubDate>Tue, 10 Mar 2020 23:35:58 +0800</pubDate>
      
      <guid>/post/anchor_free%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%BF%AE%E7%82%BC%E4%B9%8B%E8%B7%AFfcos/</guid>
      <description>主流的目标检测算法大多数是基于anchor box的, one-stage 的yolo-v2, yolo-v3, ssd&amp;hellip;以及two-stage 的faster rcnn</description>
    </item>
    
    <item>
      <title>Siege 对web 接口进行 post 压力测试</title>
      <link>/wiki/siege%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Thu, 05 Mar 2020 16:31:43 +0800</pubDate>
      
      <guid>/wiki/siege%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</guid>
      <description>在服务器开发中, 需要对接口进行压力测试, 以便根据性能确定服务的机器数, 做个笔记. siege 安装 MacOS 下直接安装: brew install siege centos 下: wget http://download.joedog.org/siege/siege-3.1.3.tar.gz tar -xvf siege-3.1.3.tar.gz cd siege-3.1.3 ./configure &amp;ndash;prefix=/usr/local/siege &amp;ndash;mandir=/usr/local/man make make install siege</description>
    </item>
    
    <item>
      <title>Centos7将默认Python升级到Python3以及安装pip</title>
      <link>/wiki/centos7%E5%AE%89%E8%A3%85pip/</link>
      <pubDate>Wed, 26 Feb 2020 11:14:30 +0800</pubDate>
      
      <guid>/wiki/centos7%E5%AE%89%E8%A3%85pip/</guid>
      <description>鲁迅说过: 当同一个问题, 你连续几次去查博客找方法时, 那么就自己记下来. 鲁迅: 我没说过. 由于Python2 已经废弃, 但centos 系统默认Py</description>
    </item>
    
    <item>
      <title>Python Orator 查询构造器速查手记</title>
      <link>/wiki/orator%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Fri, 21 Feb 2020 14:00:55 +0800</pubDate>
      
      <guid>/wiki/orator%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</guid>
      <description>orator 是轻量级的数据库查询构造器, 提供便利的接口可以创建和执行查询操作，可以在大多数数据库中使用. 安装 pip install orator 配置, 获取数据库管理器实例 from orator import DatabaseManager config</description>
    </item>
    
    <item>
      <title>图像修复3: Free-Form Image Inpainting with Gated Convolution</title>
      <link>/post/%E5%9B%BE%E5%83%8F%E4%BF%AE%E5%A4%8D3gated_cobv/</link>
      <pubDate>Thu, 20 Feb 2020 01:00:09 +0800</pubDate>
      
      <guid>/post/%E5%9B%BE%E5%83%8F%E4%BF%AE%E5%A4%8D3gated_cobv/</guid>
      <description>此文与图像修复2中review过的论文一样, 出至Adobe同一人之手. 主要创新点 提出门控卷积解决普通卷积将所有输入像素都视为有效像素的问题,</description>
    </item>
    
    <item>
      <title>OHEM: 在线困难样本挖掘: Training Region-based Object Detectors with Online Hard Example Mining</title>
      <link>/post/ohem/</link>
      <pubDate>Sun, 16 Feb 2020 18:46:23 +0800</pubDate>
      
      <guid>/post/ohem/</guid>
      <description>在目标检测中, 存在正负样本类别不平衡的现象, 特别是对于单阶段的目标检测算法. 如果每张训练图片中目标个数还很少的话, 背景区域就占了绝大部分, 分</description>
    </item>
    
    <item>
      <title>桃夭</title>
      <link>/life/%E6%A1%83%E5%A4%AD/</link>
      <pubDate>Sat, 15 Feb 2020 18:11:54 +0800</pubDate>
      
      <guid>/life/%E6%A1%83%E5%A4%AD/</guid>
      <description>桃夭 桃之夭夭，灼灼其华。 之子于归，宜其室家。 桃之夭夭，有蕡其实。 之子于归，宜其家室。 桃之夭夭，其叶蓁蓁。 之子于归，宜其家人。</description>
    </item>
    
    <item>
      <title>目标检测网络: yolo-v2 损失函数实现讲解</title>
      <link>/post/%E5%A6%82%E4%BD%95%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9E%84%E5%BB%BAyolo-v2%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 10 Feb 2020 16:20:36 +0800</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9E%84%E5%BB%BAyolo-v2%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9C/</guid>
      <description>最近闲暇时自己在pytorch实现并训练了yolo-v2, 对yolo-v2的实现做一个简单的总结, 主要是loss 层, 别的地方都没啥难度 关于y</description>
    </item>
    
    <item>
      <title>Accelerating Object Detection by Erasing Background Activations 阅读</title>
      <link>/post/omg_net/</link>
      <pubDate>Mon, 10 Feb 2020 13:10:54 +0800</pubDate>
      
      <guid>/post/omg_net/</guid>
      <description>该篇论文来源于Intel, 如其名用来加速目标检测. 主要针对于 one-stage 的目标检测算法. 主要创新点 对于 one-stage 的目标检测算法而言, 由于其设置了大量的 default box, 然后</description>
    </item>
    
    <item>
      <title>Focal loss </title>
      <link>/post/focal_loss/</link>
      <pubDate>Sun, 09 Feb 2020 18:54:07 +0800</pubDate>
      
      <guid>/post/focal_loss/</guid>
      <description>intro 主流的目标检测网络主要包含两种架构,一种是先进行region proposal再分别对得到的region 进行分类与边框回归的 two-stage 网络, RCNN 及其衍</description>
    </item>
    
    <item>
      <title>FPN: Feature Pyramid Networks for Object Detection </title>
      <link>/post/fpn/</link>
      <pubDate>Sun, 09 Feb 2020 14:42:44 +0800</pubDate>
      
      <guid>/post/fpn/</guid>
      <description>常见的检测网络结构 (a) 中使用图像金字塔构建特征金字塔, 在每一个图像尺度下单独提取特征, 耗时 (b) 使用单尺度特征图用来快速的目标检测 (c) 使用单方向多个</description>
    </item>
    
    <item>
      <title>目标检测与实例分割: Mask rcnn</title>
      <link>/post/mask_rcnn/</link>
      <pubDate>Fri, 07 Feb 2020 00:12:19 +0800</pubDate>
      
      <guid>/post/mask_rcnn/</guid>
      <description>mask rcnn 是何凯明团队在faster rcnn的基础上, 将目标检测与实例分割整合到一起的又一力作, 同时改进了faster RCNN 中 ROI pooling存在的 misalignment</description>
    </item>
    
    <item>
      <title>登高</title>
      <link>/life/%E7%99%BB%E9%AB%98/</link>
      <pubDate>Wed, 05 Feb 2020 16:21:14 +0800</pubDate>
      
      <guid>/life/%E7%99%BB%E9%AB%98/</guid>
      <description>登高 杜甫 风急天高猿啸哀，渚清沙白鸟飞回。 无边落木萧萧下，不尽长江滚滚来。 万里悲秋常作客，百年多病独登台。 艰难苦恨繁霜鬓，潦倒新停浊酒杯。 古今</description>
    </item>
    
    <item>
      <title>内容损失与风格损失</title>
      <link>/post/%E5%86%85%E5%AE%B9%E6%8D%9F%E5%A4%B1%E4%B8%8E%E9%A3%8E%E6%A0%BC%E6%8D%9F%E5%A4%B1/</link>
      <pubDate>Tue, 04 Feb 2020 19:15:55 +0800</pubDate>
      
      <guid>/post/%E5%86%85%E5%AE%B9%E6%8D%9F%E5%A4%B1%E4%B8%8E%E9%A3%8E%E6%A0%BC%E6%8D%9F%E5%A4%B1/</guid>
      <description>在画风迁移与超分辨率重建以及图像修复等视觉领域, 内容损失又称感知损失, 使用的较多, 在此做个记录, 同时也记录下风格损失 内容损失与提取计算 内容损</description>
    </item>
    
    <item>
      <title>木兰词·拟古决绝词柬友</title>
      <link>/life/%E6%9C%A8%E5%85%B0%E8%AF%8D%E6%8B%9F%E5%8F%A4%E5%86%B3%E7%BB%9D%E8%AF%8D%E6%9F%AC%E5%8F%8B/</link>
      <pubDate>Tue, 28 Jan 2020 22:39:21 +0800</pubDate>
      
      <guid>/life/%E6%9C%A8%E5%85%B0%E8%AF%8D%E6%8B%9F%E5%8F%A4%E5%86%B3%E7%BB%9D%E8%AF%8D%E6%9F%AC%E5%8F%8B/</guid>
      <description>木兰词·拟古决绝词柬友 纳兰性德 人生若只如初见，何事秋风悲画扇。 等闲变却故人心，却道故人心易变。 骊山语罢清宵半，泪雨霖铃终不怨。 何如薄幸锦衣郎</description>
    </item>
    
    <item>
      <title>摸鱼儿·雁丘词</title>
      <link>/life/%E6%91%B8%E9%B1%BC%E5%84%BF%E9%9B%81%E4%B8%98%E8%AF%8D/</link>
      <pubDate>Tue, 28 Jan 2020 20:55:34 +0800</pubDate>
      
      <guid>/life/%E6%91%B8%E9%B1%BC%E5%84%BF%E9%9B%81%E4%B8%98%E8%AF%8D/</guid>
      <description>摸鱼儿·雁丘词 元好问 问世间，情为何物，直教生死相许？天南地北双飞客，老翅几回寒暑。欢乐趣，离别苦，就中更有痴儿女。君应有语：渺万里层云，千山</description>
    </item>
    
    <item>
      <title>梦游天姥吟留别</title>
      <link>/life/%E6%A2%A6%E6%B8%B8%E5%A4%A9%E5%A7%A5%E5%90%9F%E7%95%99%E5%88%AB/</link>
      <pubDate>Mon, 27 Jan 2020 21:14:02 +0800</pubDate>
      
      <guid>/life/%E6%A2%A6%E6%B8%B8%E5%A4%A9%E5%A7%A5%E5%90%9F%E7%95%99%E5%88%AB/</guid>
      <description>梦游天姥吟留别 李白 海客谈瀛洲，烟涛微茫信难求。 越人语天姥，云霞明灭或可睹。 天姥连天向天横，势拔五岳掩赤城。 天台四万八千丈，对此欲倒东南倾。 我</description>
    </item>
    
    <item>
      <title>Vim支持中文</title>
      <link>/wiki/vim%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87/</link>
      <pubDate>Mon, 27 Jan 2020 09:21:45 +0800</pubDate>
      
      <guid>/wiki/vim%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87/</guid>
      <description>全局支持: 编辑 /etc/vimrc, 文件未添加 set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936 set termencoding=utf-8 set encoding=utf-8 只修改个人: 将 /etc/vimrc 复制到个人根目录, 修改为 .vimrc, 添加上面三句话到文件未</description>
    </item>
    
    <item>
      <title>阿房宫赋</title>
      <link>/life/%E9%98%BF%E6%88%BF%E5%AE%AB%E8%B5%8B/</link>
      <pubDate>Sun, 26 Jan 2020 22:38:47 +0800</pubDate>
      
      <guid>/life/%E9%98%BF%E6%88%BF%E5%AE%AB%E8%B5%8B/</guid>
      <description>阿房宫赋 杜牧 六王毕，四海一，蜀山兀，阿房出。覆压三百余里，隔离天日。骊山北构而西折，直走咸阳。二川溶溶，流入宫墙。五步一楼，十步一阁；廊腰缦</description>
    </item>
    
    <item>
      <title>山鬼</title>
      <link>/life/%E5%B1%B1%E9%AC%BC/</link>
      <pubDate>Fri, 24 Jan 2020 23:46:52 +0800</pubDate>
      
      <guid>/life/%E5%B1%B1%E9%AC%BC/</guid>
      <description>山鬼 屈原 若有人兮山之阿，被薜荔兮带女罗。 既含睇兮又宜笑，子慕予兮善窈窕。 乘赤豹兮从文狸，辛夷车兮结桂旗。 被石兰兮带杜衡，折芳馨兮遗所思。 余处</description>
    </item>
    
    <item>
      <title>过秦论(上)</title>
      <link>/life/%E8%BF%87%E7%A7%A6%E8%AE%BA/</link>
      <pubDate>Wed, 22 Jan 2020 23:12:30 +0800</pubDate>
      
      <guid>/life/%E8%BF%87%E7%A7%A6%E8%AE%BA/</guid>
      <description>过秦论(上) 贾谊 秦孝公据殽函之固，拥雍州之地，君臣固守，以窥周室；有席卷天下，包举宇内，囊括四海之意，并吞八荒之心。当是时也，商君佐之；内立</description>
    </item>
    
    <item>
      <title>出师表</title>
      <link>/life/%E5%87%BA%E5%B8%88%E8%A1%A8/</link>
      <pubDate>Wed, 22 Jan 2020 20:48:31 +0800</pubDate>
      
      <guid>/life/%E5%87%BA%E5%B8%88%E8%A1%A8/</guid>
      <description>出师表 诸葛亮 臣亮言：先帝创业未半而中道崩殂，今天下三分，益州疲敝，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇</description>
    </item>
    
    <item>
      <title>琵琶行</title>
      <link>/life/%E7%90%B5%E7%90%B6%E8%A1%8C/</link>
      <pubDate>Tue, 21 Jan 2020 16:50:10 +0800</pubDate>
      
      <guid>/life/%E7%90%B5%E7%90%B6%E8%A1%8C/</guid>
      <description>琵琶行 &amp;nbsp 白居易 &amp;nbsp &amp;nbsp 浔阳江头夜送客，枫叶荻花秋瑟瑟。 &amp;nbsp 主人下马客在船，举酒欲饮无管弦。 &amp;nbsp 醉不成欢惨将别，别时茫茫江浸月。 &amp;nbsp 忽闻水上琵琶声，主人</description>
    </item>
    
    <item>
      <title>Progan: PROGRESSIVE GROWING OF GANS FOR IMPROVED QUALITY, STABILITY, AND VARIATION</title>
      <link>/post/progan%E9%98%85%E8%AF%BB/</link>
      <pubDate>Mon, 20 Jan 2020 22:09:52 +0800</pubDate>
      
      <guid>/post/progan%E9%98%85%E8%AF%BB/</guid>
      <description>主要贡献 GAN 高清图像生成难的问题 方法 提出新的 GAN 训练方法: 逐渐增加生成器和鉴别器&amp;ndash;从低分辨率开始, 逐渐添加新层，以随着训练的进行网络</description>
    </item>
    
    <item>
      <title>秋风词</title>
      <link>/life/%E7%A7%8B%E9%A3%8E%E8%AF%8D/</link>
      <pubDate>Fri, 10 Jan 2020 21:15:05 +0800</pubDate>
      
      <guid>/life/%E7%A7%8B%E9%A3%8E%E8%AF%8D/</guid>
      <description>秋风词 李白 秋风清，秋月明。 落叶聚还散，寒鸦栖复惊。 相思相见知何日？此时此夜难为情！ 入我相思门，知我相思苦。 长相思兮长相忆，短相思兮无穷极。 早</description>
    </item>
    
    <item>
      <title>Densecrf与图像分割</title>
      <link>/post/densecrf%E5%B0%8F%E8%AE%A1/</link>
      <pubDate>Thu, 02 Jan 2020 23:54:19 +0800</pubDate>
      
      <guid>/post/densecrf%E5%B0%8F%E8%AE%A1/</guid>
      <description>在图像分割中，在FCN之前，流行的是以概率图模型为代表的传统方法. FCN出来之后一段时间，仍然流行的是以FCN为前端，CRF为后端优化. 随着</description>
    </item>
    
    <item>
      <title>题都城南庄</title>
      <link>/life/%E9%A2%98%E9%83%BD%E5%9F%8E%E5%8D%97%E5%BA%84/</link>
      <pubDate>Thu, 02 Jan 2020 21:03:57 +0800</pubDate>
      
      <guid>/life/%E9%A2%98%E9%83%BD%E5%9F%8E%E5%8D%97%E5%BA%84/</guid>
      <description>题都城南庄 崔护 去年今日此门中， 人面桃花相映红。 人面不知何处去， 桃花依旧笑春风。</description>
    </item>
    
    <item>
      <title>图像修复2: Generative Image Inpainting with Contextual Attention</title>
      <link>/post/%E5%9B%BE%E5%83%8F%E4%BF%AE%E5%A4%8D2%E4%B8%8A%E4%B8%8B%E6%96%87attention/</link>
      <pubDate>Thu, 02 Jan 2020 01:00:09 +0800</pubDate>
      
      <guid>/post/%E5%9B%BE%E5%83%8F%E4%BF%AE%E5%A4%8D2%E4%B8%8A%E4%B8%8B%E6%96%87attention/</guid>
      <description>之前介绍过NVIDIA的图像修复方法, 使用的img-img的方法. 由于GAN网络在图像生成方向的大放异彩, 今天review一下, Adobe的</description>
    </item>
    
    <item>
      <title>深度学习归一化: BN,LN,IN,GN</title>
      <link>/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BD%92%E4%B8%80%E5%8C%96/</link>
      <pubDate>Sun, 29 Dec 2019 13:51:47 +0800</pubDate>
      
      <guid>/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BD%92%E4%B8%80%E5%8C%96/</guid>
      <description>深度学习中的常见归一化方法主要有: batch Normalization, layer Normalization, instance Normalization, group Normalization. 神经网络学习过程的本质就是为了学习数据分布, 如果没有做归一化处理, 那么每一批次训练数据的分</description>
    </item>
    
    <item>
      <title>图像修复1: Image Inpainting for Irregular Holes Using Partial Convolutions</title>
      <link>/post/%E5%9B%BE%E5%83%8F%E4%BF%AE%E5%A4%8D1partial_conv/</link>
      <pubDate>Sat, 28 Dec 2019 01:00:09 +0800</pubDate>
      
      <guid>/post/%E5%9B%BE%E5%83%8F%E4%BF%AE%E5%A4%8D1partial_conv/</guid>
      <description>图像修复一直是CV领域的重点与难点, 基于深度学习的图像修复因为其可以学习到丰富的语义信息和潜在丰富的表达能力, 受到研究者们的热捧. 这篇文章主</description>
    </item>
    
    <item>
      <title>在服务器中使用jupyter以及在本地pycharm编辑代码并同步到服务器并运行</title>
      <link>/wiki/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8jupyter/</link>
      <pubDate>Fri, 27 Dec 2019 22:26:59 +0800</pubDate>
      
      <guid>/wiki/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8jupyter/</guid>
      <description>在服务器中使用 jupyter 在使用服务器开发时, 服务器无法浏览器打开，因此在服务器上配置端口以运行jupyter 一: 安装 jupyter 二: 运行 jupyter notebook &amp;ndash;generate-config ，生成配置文件 三</description>
    </item>
    
    <item>
      <title>libtorch c&#43;&#43; 使用例子</title>
      <link>/post/pytorch%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Wed, 25 Dec 2019 12:37:07 +0800</pubDate>
      
      <guid>/post/pytorch%E9%83%A8%E7%BD%B2/</guid>
      <description>pytorch可使用flask作为服务器部署，但是由于Python的可移植性和速度比不上c++, pytorch还提供将模型转化到c++端运行</description>
    </item>
    
    <item>
      <title>岳阳楼记</title>
      <link>/life/%E5%B2%B3%E9%98%B3%E6%A5%BC%E8%AE%B0/</link>
      <pubDate>Tue, 24 Dec 2019 23:06:13 +0800</pubDate>
      
      <guid>/life/%E5%B2%B3%E9%98%B3%E6%A5%BC%E8%AE%B0/</guid>
      <description>岳阳楼记 范仲淹 庆历四年春，滕子京谪守巴陵郡。越明年，政通人和，百废具兴，乃重修岳阳楼，增其旧制，刻唐贤今人诗赋于其上；属予作文以记之。 予观夫</description>
    </item>
    
    <item>
      <title>可分离卷积</title>
      <link>/post/%E5%8F%AF%E5%88%86%E7%A6%BB%E5%8D%B7%E7%A7%AF/</link>
      <pubDate>Tue, 24 Dec 2019 22:09:22 +0800</pubDate>
      
      <guid>/post/%E5%8F%AF%E5%88%86%E7%A6%BB%E5%8D%B7%E7%A7%AF/</guid>
      <description>可分离卷积主要包括空间可分离卷积（Spatial Separable Convolutions）、深度可分离卷积（Depthwise Separable Convolutions.</description>
    </item>
    
    <item>
      <title>Docker小记</title>
      <link>/wiki/docker%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Thu, 19 Dec 2019 20:38:40 +0800</pubDate>
      
      <guid>/wiki/docker%E5%B0%8F%E8%AE%B0/</guid>
      <description>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，</description>
    </item>
    
    <item>
      <title>人脸检测网络: SSH: Single Stage Headless Face Detector</title>
      <link>/post/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8Bssh%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Wed, 18 Dec 2019 22:54:51 +0800</pubDate>
      
      <guid>/post/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8Bssh%E7%BD%91%E7%BB%9C/</guid>
      <description>最近看了一下人脸检测的论文, 除了通用的目标检测方法, 看见了这篇论文, 整体上而言和yolo-v3结构是类似的, SSH 设计了不同的检测头. SSH 网络 SSH 网</description>
    </item>
    
    <item>
      <title>Squeeze-and-Excitation Networks</title>
      <link>/post/se-net/</link>
      <pubDate>Wed, 18 Dec 2019 11:59:07 +0800</pubDate>
      
      <guid>/post/se-net/</guid>
      <description>Squeeze-and-Excitation Networks（SENet)是CVPR2018公布的一种全新的图像识别结构，它通过对特征通道间的相关性进行建模，把重要的特征进行强化来提</description>
    </item>
    
    <item>
      <title>钗头凤·红酥手</title>
      <link>/life/%E9%92%97%E5%A4%B4%E5%87%A4/</link>
      <pubDate>Fri, 13 Dec 2019 22:49:32 +0800</pubDate>
      
      <guid>/life/%E9%92%97%E5%A4%B4%E5%87%A4/</guid>
      <description>钗头凤·红酥手 陆游 红酥手，黄縢酒，满城春色宫墙柳。东风恶，欢情薄。一杯愁绪，几年离索。错、错、错。 春如旧，人空瘦，泪痕红浥鲛绡透。挑花落，闲</description>
    </item>
    
    <item>
      <title>目标检测网络: yolo-v1 实现关键点讲解</title>
      <link>/post/%E5%A6%82%E4%BD%95%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9E%84%E5%BB%BAyolo-v1%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Tue, 10 Dec 2019 16:20:31 +0800</pubDate>
      
      <guid>/post/%E5%A6%82%E4%BD%95%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9E%84%E5%BB%BAyolo-v1%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9C/</guid>
      <description>yolo-v1作为anchor free 的目标检测方法, 虽然已经较老，但深入理解其原理还是很有必要的. 对于个人而言, 完全从头实现目标检测算法是必不可</description>
    </item>
    
    <item>
      <title>湘夫人</title>
      <link>/life/%E6%B9%98%E5%A4%AB%E4%BA%BA/</link>
      <pubDate>Tue, 03 Dec 2019 23:31:01 +0800</pubDate>
      
      <guid>/life/%E6%B9%98%E5%A4%AB%E4%BA%BA/</guid>
      <description>湘夫人 屈原 帝子降兮北渚，目眇眇兮愁予。 袅袅兮秋风，洞庭波兮木叶下。 登白薠兮骋望，与佳期兮夕张。 鸟何萃兮𬞟中，罾何为兮木上。 沅有茝兮澧有兰，思</description>
    </item>
    
    <item>
      <title>诗经:蒹葭</title>
      <link>/life/%E8%92%B9%E8%91%AD/</link>
      <pubDate>Mon, 02 Dec 2019 16:33:36 +0800</pubDate>
      
      <guid>/life/%E8%92%B9%E8%91%AD/</guid>
      <description>蒹葭 蒹葭苍苍，白露为霜。所谓伊人，在水一方。 溯洄从之，道阻且长。溯游从之，宛在水中央。 蒹葭萋萋，白露未晞。所谓伊人，在水之湄。 溯洄从之，道阻</description>
    </item>
    
    <item>
      <title>Facenet: A Unified Embedding for Face Recognition and Clustering</title>
      <link>/post/facenet/</link>
      <pubDate>Thu, 28 Nov 2019 22:31:58 +0800</pubDate>
      
      <guid>/post/facenet/</guid>
      <description>主要创新点 FaceNet 将 face verification(判断是否是同一个人)，recognition(判断是何人)和clustering(寻找相似人脸) 任</description>
    </item>
    
    <item>
      <title>蜀道难</title>
      <link>/life/%E8%9C%80%E9%81%93%E9%9A%BE/</link>
      <pubDate>Wed, 27 Nov 2019 21:19:50 +0800</pubDate>
      
      <guid>/life/%E8%9C%80%E9%81%93%E9%9A%BE/</guid>
      <description>蜀道难 噫吁嚱，危乎高哉！蜀道之难，难于上青天！ 蚕丛及鱼凫，开国何茫然！ 尔来四万八千岁，不与秦塞通人烟。 西当太白有鸟道，可以横绝峨眉巅。 地崩山</description>
    </item>
    
    <item>
      <title>Dcgan: 深度卷积生成对抗网络</title>
      <link>/post/dcgan/</link>
      <pubDate>Tue, 26 Nov 2019 19:58:17 +0800</pubDate>
      
      <guid>/post/dcgan/</guid>
      <description>DCGAN 在 Ian Goodfellow 提出GAN 以来, 在图像领域GAN 可谓被玩的声名大噪. DCAGN 主要是针对卷积实现GAN时, 提出一系列架构设计规则, 使其训练更稳定. 主要有以下</description>
    </item>
    
    <item>
      <title>赤壁赋</title>
      <link>/life/%E8%B5%A4%E5%A3%81%E8%B5%8B/</link>
      <pubDate>Tue, 26 Nov 2019 16:47:05 +0800</pubDate>
      
      <guid>/life/%E8%B5%A4%E5%A3%81%E8%B5%8B/</guid>
      <description>赤壁赋 苏轼 壬戌之秋，七月既望，苏子与客泛舟游于赤壁之下。清风徐来，水波不兴，举酒属客，诵明月之诗，歌窈窕之章。少焉，月出于东山之上，徘徊于斗</description>
    </item>
    
    <item>
      <title>滕王阁序</title>
      <link>/life/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F/</link>
      <pubDate>Sat, 23 Nov 2019 20:49:45 +0800</pubDate>
      
      <guid>/life/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F/</guid>
      <description>滕王阁序 王勃 豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州</description>
    </item>
    
    <item>
      <title>目标检测之RFB模块: Receptive Field Block Net for Accurate and Fast Object Detection</title>
      <link>/post/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B9%8Brfb%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Mon, 18 Nov 2019 22:02:39 +0800</pubDate>
      
      <guid>/post/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B9%8Brfb%E6%A8%A1%E5%9D%97/</guid>
      <description>RFB 模块主要是针对在保持轻量级网络的速度快、计算量小的情况下, 提升检测的精度, 模块如其名, 从感受野角度入手, 增强轻量级网络的特征表示, 主要用来</description>
    </item>
    
    <item>
      <title>越人歌</title>
      <link>/life/%E8%B6%8A%E4%BA%BA%E6%AD%8C/</link>
      <pubDate>Mon, 18 Nov 2019 13:57:44 +0800</pubDate>
      
      <guid>/life/%E8%B6%8A%E4%BA%BA%E6%AD%8C/</guid>
      <description>越人歌 &amp;nbsp &amp;nbsp 今夕何夕兮？搴舟中流。 &amp;nbsp 今日何日兮？得与王子同舟。 &amp;nbsp 蒙羞被好兮，不訾诟耻。 &amp;nbsp 心几烦而不绝兮，得知王子。 &amp;nbsp 山有木兮木有枝，心悦君兮君</description>
    </item>
    
    <item>
      <title>凤求凰</title>
      <link>/life/%E5%87%A4%E6%B1%82%E5%87%B0/</link>
      <pubDate>Sat, 16 Nov 2019 13:40:55 +0800</pubDate>
      
      <guid>/life/%E5%87%A4%E6%B1%82%E5%87%B0/</guid>
      <description>凤求凰 &amp;nbsp &amp;nbsp 司马相如 &amp;nbsp &amp;nbsp 有一美人兮，见之不忘。 &amp;nbsp 一日不见兮，思之如狂。 &amp;nbsp 凤飞翱翔兮，四海求凰。 &amp;nbsp 无奈佳人兮，不在东墙。 &amp;nbsp 将琴代语兮，聊写衷肠。</description>
    </item>
    
    <item>
      <title>Anchor free 目标检测修炼之路: DenseBox : Unifying Landmark Localization with End to End Object Detection</title>
      <link>/post/anchor_free%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%BF%AE%E7%82%BC%E4%B9%8B%E8%B7%AFdense_box/</link>
      <pubDate>Wed, 13 Nov 2019 22:16:21 +0800</pubDate>
      
      <guid>/post/anchor_free%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%BF%AE%E7%82%BC%E4%B9%8B%E8%B7%AFdense_box/</guid>
      <description>DenseBox 是与yolo, faster rcnn同期的目标检测网络, 与yolo v1一样采用 anchor-free的思想, 网络结构采用FCN来实现目标检测 主要创新点</description>
    </item>
    
    <item>
      <title>Dlib 人脸相关实践</title>
      <link>/post/dlib%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 12 Nov 2019 12:58:31 +0800</pubDate>
      
      <guid>/post/dlib%E5%AE%9E%E8%B7%B5/</guid>
      <description>Dlib由C++编写，提供了和机器学习、数值计算、图模型算法、图像处理等领域相关的一系列功能, 对Python 也提供了便利的接口, 但C++ 版功</description>
    </item>
    
    <item>
      <title>Yolo: v1-v3</title>
      <link>/post/yolo/</link>
      <pubDate>Sat, 09 Nov 2019 17:16:26 +0800</pubDate>
      
      <guid>/post/yolo/</guid>
      <description>目标检测主要有两种实现，一是faster-rcnn为代表的proposal two-stage 系列，二是以YOLO为代表的one-stage 的回归网络. 主要区</description>
    </item>
    
    <item>
      <title>动手搭建神经网络之:简单联合分割、检测网络</title>
      <link>/post/how_to_built_a_simple_maskrcnn/</link>
      <pubDate>Mon, 28 Oct 2019 23:58:27 +0800</pubDate>
      
      <guid>/post/how_to_built_a_simple_maskrcnn/</guid>
      <description>coursera deeplearning.ai目标检测课后实践，构建一个简化版单目标yolo目标检测并添加前景对象分割分支 网络结构 MASK-Rcnn主要是</description>
    </item>
    
    <item>
      <title>Inception系列</title>
      <link>/post/inception_v1_to_v4/</link>
      <pubDate>Thu, 24 Oct 2019 16:51:27 +0800</pubDate>
      
      <guid>/post/inception_v1_to_v4/</guid>
      <description>对卷积神经网络而言，提升网络的深度与宽度能够显著提升网络的性能，但是网络越大意味着参数量的增加，会使网络更加容易过拟合。同时，增加网络的大小</description>
    </item>
    
    <item>
      <title>Python 从图像URL获取图像数据的几种方式</title>
      <link>/wiki/python_%E4%BB%8E%E5%9B%BE%E5%83%8Furl%E8%8E%B7%E5%8F%96%E5%9B%BE%E5%83%8F%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Mon, 21 Oct 2019 15:12:24 +0800</pubDate>
      
      <guid>/wiki/python_%E4%BB%8E%E5%9B%BE%E5%83%8Furl%E8%8E%B7%E5%8F%96%E5%9B%BE%E5%83%8F%E6%95%B0%E6%8D%AE/</guid>
      <description>线上服务器获取图像大都是从URL获取, 总结 Python 环境下, 以下几种从图像 URL 获取图像数据 PIL.Image + requests import requests as req from PIL import Image from io import BytesIO response = req.get(img_url) image = Image.open(BytesIO(response.content)) skimage from skimage import io image = io.imread(img_url) OpenCV</description>
    </item>
    
    <item>
      <title>Object detection(4): Faster R-CNN</title>
      <link>/post/faster_rcnn%E9%98%85%E8%AF%BB/</link>
      <pubDate>Sun, 20 Oct 2019 22:10:11 +0800</pubDate>
      
      <guid>/post/faster_rcnn%E9%98%85%E8%AF%BB/</guid>
      <description>主要贡献 提出 RPN 网络, 将region proposal 和目标检测统一到一个卷积网络中 anchor 的使用 网络结构 faster rcnn 检测流程如上图所示: 图像经过卷积层提取 feature maps 然后在RPN</description>
    </item>
    
    <item>
      <title>SSD: Single Shot MultiBox Detector</title>
      <link>/post/ssd/</link>
      <pubDate>Fri, 18 Oct 2019 12:19:25 +0800</pubDate>
      
      <guid>/post/ssd/</guid>
      <description>SSD发表在2016ECCV, 是one-stage目标检测算法中经典的框架之一. 其精度优于yolo-v1, 在yolo-v2之后被超越. SSD 具有</description>
    </item>
    
    <item>
      <title>object detection(3): Fast rcnn</title>
      <link>/post/fast_rcnn%E9%98%85%E8%AF%BB/</link>
      <pubDate>Wed, 09 Oct 2019 21:24:19 +0800</pubDate>
      
      <guid>/post/fast_rcnn%E9%98%85%E8%AF%BB/</guid>
      <description>主要贡献 RCNN, SPPnet的训练是 multi-stage的, 需要每一步训练一个模型. faste rcnn 通过 multi-task loss 将分类与边框回归融合到网络中, 前两者为训练SVM</description>
    </item>
    
    <item>
      <title>GRU小结</title>
      <link>/post/gru%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Mon, 07 Oct 2019 22:05:27 +0800</pubDate>
      
      <guid>/post/gru%E5%B0%8F%E7%BB%93/</guid>
      <description>GRU(Gated Recurrent Unit)即门控循环单元，是LSTM的变体. GRU保留了LSTM对梯度消失问题的抗力，但内部更简单. LSTM有：输入门，遗忘门，输出门，</description>
    </item>
    
    <item>
      <title>Object detection(2): SPPnet</title>
      <link>/post/spp_net/</link>
      <pubDate>Sat, 05 Oct 2019 19:40:34 +0800</pubDate>
      
      <guid>/post/spp_net/</guid>
      <description>在 RCNN 中说到, RCNN存在的一个问题是需要将region proposal进行warp到固定尺寸,这会带来失真等影响. 这是由于具有全连接的CNN</description>
    </item>
    
    <item>
      <title>长恨歌</title>
      <link>/life/%E9%95%BF%E6%81%A8%E6%AD%8C/</link>
      <pubDate>Sat, 05 Oct 2019 17:55:09 +0800</pubDate>
      
      <guid>/life/%E9%95%BF%E6%81%A8%E6%AD%8C/</guid>
      <description>长恨歌 &amp;nbsp 白居易 &amp;nbsp &amp;nbsp 汉皇重色思倾国，御宇多年求不得。 &amp;nbsp 杨家有女初长成，养在深闺人未识。 &amp;nbsp 天生丽质难自弃，一朝选在君王侧。 &amp;nbsp 回眸一笑百媚生，六宫</description>
    </item>
    
    <item>
      <title>object detection(1): Rcnn</title>
      <link>/post/rcnn%E9%98%85%E8%AF%BB/</link>
      <pubDate>Thu, 03 Oct 2019 21:24:12 +0800</pubDate>
      
      <guid>/post/rcnn%E9%98%85%E8%AF%BB/</guid>
      <description>Rcnn 作为使用CNN进行目标检测的开山之作, 之后，在其基础上延展出了fast rcnn, faster rcnn, mask rcnn, 等等, 都是在针对前人的问题不断改进, 本文对rcnn 进行小结</description>
    </item>
    
    <item>
      <title>Anchor box</title>
      <link>/post/anchor_box/</link>
      <pubDate>Tue, 01 Oct 2019 15:17:30 +0800</pubDate>
      
      <guid>/post/anchor_box/</guid>
      <description>对于主流的 one-stage(Faster r-cnn&amp;hellip;) 或者是 tow-stage(SSD, YOLO&amp;hellip;)的目标检测算法, 大多都采用了 anchor/prior box机制. Anchor-box 的意义 在yolo-v1 中, 每个grid 输出两个b</description>
    </item>
    
    <item>
      <title>关雎</title>
      <link>/life/%E5%85%B3%E9%9B%8E/</link>
      <pubDate>Mon, 23 Sep 2019 14:38:48 +0800</pubDate>
      
      <guid>/life/%E5%85%B3%E9%9B%8E/</guid>
      <description>关雎 &amp;nbsp &amp;nbsp 关关雎鸠，在河之洲。窈窕淑女，君子好逑。 &amp;nbsp 参差荇菜，左右流之。窈窕淑女，寤寐求之。 &amp;nbsp 求之不得，寤寐思服。悠哉悠哉，辗转反侧。 &amp;nbsp 参差荇</description>
    </item>
    
    <item>
      <title>Edge_gan总结</title>
      <link>/post/edge_gan/</link>
      <pubDate>Thu, 19 Sep 2019 23:32:10 +0800</pubDate>
      
      <guid>/post/edge_gan/</guid>
      <description>最近刚好在做分割，顺手玩玩用GAN做边缘检测. 本意是想在BSDS轮廓分割数据集上做，同时验证针对样本极不平衡的损失函数挑选问题，简单做个小结</description>
    </item>
    
    <item>
      <title>L1、L2、Smooth_L1损失函数对比</title>
      <link>/post/l1_l2_smoothl1%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Thu, 19 Sep 2019 11:07:59 +0800</pubDate>
      
      <guid>/post/l1_l2_smoothl1%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/</guid>
      <description>L1、L2以及Smooth_L1损失函数作为目标检测中回归层常用的损失函数，对他们进行一个对比分析. 三者公式对比如下: 分别对三者求导数: L2</description>
    </item>
    
    <item>
      <title>目标检测map计算</title>
      <link>/post/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8Bmap%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Tue, 17 Sep 2019 20:23:17 +0800</pubDate>
      
      <guid>/post/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8Bmap%E8%AE%A1%E7%AE%97/</guid>
      <description>目标检测评价指标MAP计算流程小结 目标检测由于包含分类以及box回归, 对其进行评价相对于单独的分类问题更复杂，直接使用精度、召回作为评估准则</description>
    </item>
    
    <item>
      <title>国风.邺风.静女</title>
      <link>/life/%E9%9D%99%E5%A5%B3/</link>
      <pubDate>Sun, 15 Sep 2019 14:30:46 +0800</pubDate>
      
      <guid>/life/%E9%9D%99%E5%A5%B3/</guid>
      <description>静女 &amp;nbsp &amp;nbsp &amp;nbsp 静女其姝，俟我于城隅。爱而不见，搔首踟蹰。 &amp;nbsp 静女其娈，贻我彤管。彤管有炜，说怿女美。 &amp;nbsp 自牧归荑，洵美奇异。非汝之为美，美人之贻。 &amp;nbsp</description>
    </item>
    
    <item>
      <title>从RNN到LSTM小记</title>
      <link>/post/lstm/</link>
      <pubDate>Fri, 13 Sep 2019 19:51:54 +0800</pubDate>
      
      <guid>/post/lstm/</guid>
      <description>记录自己对LSTM结构的理解，以及结合keras在实现LSTM模型时数据的输入数据等的处理。 1.SimpleRNN 对于多层感知机网络而言，是假设每个输入数据具有</description>
    </item>
    
    <item>
      <title>目标检测非极大值抑制: NMS</title>
      <link>/post/nms/</link>
      <pubDate>Thu, 12 Sep 2019 17:28:58 +0800</pubDate>
      
      <guid>/post/nms/</guid>
      <description>非极大值抑制（Non-Maximum Suppression，NMS），即抑制不是极大值的元素，可以理解为局部最大搜索. 在目标检测中, 无论是 one-stage</description>
    </item>
    
    <item>
      <title>宣州谢朓楼饯别校书叔云</title>
      <link>/life/%E5%AE%A3%E5%B7%9E%E8%B0%A2%E6%9C%93%E6%A5%BC%E9%A5%AF%E5%88%AB%E6%A0%A1%E4%B9%A6%E5%8F%94%E4%BA%91/</link>
      <pubDate>Wed, 11 Sep 2019 11:34:53 +0800</pubDate>
      
      <guid>/life/%E5%AE%A3%E5%B7%9E%E8%B0%A2%E6%9C%93%E6%A5%BC%E9%A5%AF%E5%88%AB%E6%A0%A1%E4%B9%A6%E5%8F%94%E4%BA%91/</guid>
      <description>宣州谢朓楼饯别校书叔云 &amp;nbsp 李白 &amp;nbsp &amp;nbsp 弃我去者，昨日之日不可留； 乱我心者，今日之日多烦忧。 长风万里送秋雁，对此可以酣高楼。 蓬莱文章建安骨，中间小谢</description>
    </item>
    
    <item>
      <title>CRNN笔记以及数字检测识别实践</title>
      <link>/post/crnn%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BB%A5%E5%8F%8A%E6%95%B0%E5%AD%97%E6%A3%80%E6%B5%8B%E8%AF%86%E5%88%AB%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 08 Sep 2019 16:07:07 +0800</pubDate>
      
      <guid>/post/crnn%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BB%A5%E5%8F%8A%E6%95%B0%E5%AD%97%E6%A3%80%E6%B5%8B%E8%AF%86%E5%88%AB%E5%AE%9E%E7%8E%B0/</guid>
      <description>主流的OCR识别分为两个部分:先检测出文字区域再识别文字。检测可采用通用的目标检测方法以及针对于文本检测的网络,识别主要是CRNN及其变体。</description>
    </item>
    
    <item>
      <title>侠客行</title>
      <link>/life/%E4%BE%A0%E5%AE%A2%E8%A1%8C/</link>
      <pubDate>Sun, 01 Sep 2019 11:33:30 +0800</pubDate>
      
      <guid>/life/%E4%BE%A0%E5%AE%A2%E8%A1%8C/</guid>
      <description>侠客行 &amp;nbsp 李白 &amp;nbsp &amp;nbsp 赵客缦胡缨，吴钩霜明月；银鞍照白马，飒沓如流星。 十步杀一人，千里不留行；事了拂衣去，深藏功与名。 闲过信陵饮，脱剑膝前横；将炙</description>
    </item>
    
    <item>
      <title>East:An Efficient and Accurate Scene Text Detector阅读及应用</title>
      <link>/post/east%E5%8F%8A%E5%BA%94%E7%94%A8/</link>
      <pubDate>Wed, 28 Aug 2019 00:03:07 +0800</pubDate>
      
      <guid>/post/east%E5%8F%8A%E5%BA%94%E7%94%A8/</guid>
      <description>East是旷视科技2017年发表的论文,针对于场景文本检测。East网络也可以轻易的扩展到其他目标检测任务上。我主要在改进版的East基础上</description>
    </item>
    
    <item>
      <title>CycleGAN论文阅读总结及实现</title>
      <link>/post/cyclegan/</link>
      <pubDate>Sat, 24 Aug 2019 21:42:13 +0800</pubDate>
      
      <guid>/post/cyclegan/</guid>
      <description>在cyclegan之前，对于两个域的图像进行转化，比如图像风格转换，它们的训练集图像都是成对的.而cyclegan则解决了训练图像必须成对的</description>
    </item>
    
    <item>
      <title>基于vgg16的半监督视频单目标分割网络&#43; Dense-crf</title>
      <link>/post/%E5%9F%BA%E4%BA%8Evgg%E7%9A%84%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/</link>
      <pubDate>Sat, 24 Aug 2019 00:03:12 +0800</pubDate>
      
      <guid>/post/%E5%9F%BA%E4%BA%8Evgg%E7%9A%84%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/</guid>
      <description>.img-wrap{ border: 1px } img{ float: left; width: 25%; height: 160; } one-shot 半监督视频单目标分割 网络实现 采用keras实现，网络结构如下。 类似于unet，但没有unet那么多的参数。使用de</description>
    </item>
    
    <item>
      <title>春江花月夜</title>
      <link>/life/%E6%98%A5%E6%B1%9F%E8%8A%B1%E6%9C%88%E5%A4%9C-%E5%BC%A0%E8%8B%A5%E8%99%9A/</link>
      <pubDate>Wed, 21 Aug 2019 10:31:51 +0800</pubDate>
      
      <guid>/life/%E6%98%A5%E6%B1%9F%E8%8A%B1%E6%9C%88%E5%A4%9C-%E5%BC%A0%E8%8B%A5%E8%99%9A/</guid>
      <description>春江花月夜 张若虚 &amp;nbsp 春江潮水连海平，海上明月共潮生 滟滟随波千万里，何处春江无月明？ 江流宛转绕芳甸，月照花林皆似霰 空里流霜不觉飞， 汀上白沙看不见</description>
    </item>
    
    <item>
      <title>MacOS下Clion 使用OpenCV</title>
      <link>/wiki/mac_clion_opencv/</link>
      <pubDate>Fri, 16 Aug 2019 19:46:35 +0800</pubDate>
      
      <guid>/wiki/mac_clion_opencv/</guid>
      <description>MAC 下使用Clion 配置OpenCV brew install opencv 在Clion中新建项目, 假设项目名为demo, 在 CMAKELists.txt中编辑 cmake_minimum_required(VERSION 3.9) project(demo) set(CMAKE_CXX_STANDARD 11) find_package(OpenCV) include_directories(${OpenCV_INCLUDE_DIRS}) add_executable(demo main.cpp)</description>
    </item>
    
    <item>
      <title>清平调: 云想衣裳花想容</title>
      <link>/life/%E6%B8%85%E5%B9%B3%E8%B0%83-%E6%9D%8E%E7%99%BD/</link>
      <pubDate>Sun, 11 Aug 2019 09:27:19 +0800</pubDate>
      
      <guid>/life/%E6%B8%85%E5%B9%B3%E8%B0%83-%E6%9D%8E%E7%99%BD/</guid>
      <description>&amp;nbsp 云想衣裳花想容, 春风拂槛露华浓 若非群玉山头见, 会向瑶台月下逢 &amp;nbsp 一枝秾艳露凝香, 云雨巫山枉断肠 借问汉宫谁得似, 可怜飞燕倚新妆 &amp;nbsp 名花倾国两相欢</description>
    </item>
    
    <item>
      <title>Hive命令记录</title>
      <link>/wiki/hive%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 09 Aug 2019 15:43:07 +0800</pubDate>
      
      <guid>/wiki/hive%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</guid>
      <description>1.从CSV文件读取数据写入表中,指定分割符 # 建表 CREATE TABLE `my_table`( `city_id` string COMMENT &#39;city_id&#39;, `area_code` string COMMENT &#39;area ID&#39;, `prediction` int COMMENT &#39;date prediction&#39;, `vdate` string COMMENT &#39;date&#39;) row format delimited fields terminated by &#39;,&#39;; # 将本地数据写入数据库 LOAD DATA LOCAL INPATH &#39;/home/yourcsvfile.csv&#39; OVERWRITE</description>
    </item>
    
    <item>
      <title>将进酒</title>
      <link>/life/%E5%B0%86%E8%BF%9B%E9%85%92/</link>
      <pubDate>Thu, 08 Aug 2019 11:33:24 +0800</pubDate>
      
      <guid>/life/%E5%B0%86%E8%BF%9B%E9%85%92/</guid>
      <description>&amp;nbsp &amp;nbsp &amp;nbsp 将进酒 &amp;nbsp 李白 &amp;nbsp &amp;nbsp 君不见黄河之水天上来，奔流到海不复回。 君不见高堂明镜悲白发，朝如青丝暮成雪。 人生得意须尽欢，莫使金樽空对月。 天生我材必</description>
    </item>
    
    <item>
      <title>（译）你的神经网络不工作的37个可能原因</title>
      <link>/post/37reasonsforyournetnotwork/</link>
      <pubDate>Wed, 07 Aug 2019 11:29:13 +0800</pubDate>
      
      <guid>/post/37reasonsforyournetnotwork/</guid>
      <description>神经网络的训练是一个复杂的问题，很多时候会遇见即使拿到了别人的代码也训练不出来，无法复现。 以下是37个训练网络的建议英文原文： 1.最基本的措</description>
    </item>
    
    <item>
      <title>江城子 乙卯正月二十日夜记梦</title>
      <link>/life/%E6%B1%9F%E5%9F%8E%E5%AD%90-%E4%B9%99%E5%8D%AF%E6%AD%A3%E6%9C%88%E4%BA%8C%E5%8D%81%E6%97%A5%E5%A4%9C%E8%AE%B0%E6%A2%A6/</link>
      <pubDate>Fri, 02 Aug 2019 11:11:08 +0800</pubDate>
      
      <guid>/life/%E6%B1%9F%E5%9F%8E%E5%AD%90-%E4%B9%99%E5%8D%AF%E6%AD%A3%E6%9C%88%E4%BA%8C%E5%8D%81%E6%97%A5%E5%A4%9C%E8%AE%B0%E6%A2%A6/</guid>
      <description>&amp;nbsp &amp;nbsp &amp;nbsp 江城子-乙卯正月二十日夜记梦 苏轼 十年生死两茫茫，不思量，自难忘。 千里孤坟，无处话凄凉。 纵使相逢应不识，尘满面，鬓如霜。 &amp;nbsp 夜来幽梦忽还乡</description>
    </item>
    
    <item>
      <title>Pandas常用操作以及常见tips、tricks</title>
      <link>/wiki/pandas%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 28 Jul 2019 21:58:03 +0800</pubDate>
      
      <guid>/wiki/pandas%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>常用操作 读数据 1.读csv df = pd.read_csv(&amp;quot;data.csv&amp;quot;) 2.读数据库 import MySQLdb from pandas import DataFrame from pandas.io.sql import read_sql db = MySQLdb.connect(host=&amp;quot;localhost&amp;quot;, # your host, usually localhost user=&amp;quot;root&amp;quot;, # your username passwd=&amp;quot;password&amp;quot;, # your password db=&amp;quot;dbname&amp;quot;) # name of the data base query = &amp;quot;SELECT * FROM tablename&amp;quot; df = read_sql(query, db) 数据快照 1</description>
    </item>
    
    <item>
      <title>使用SimpleHttpServer传输文件</title>
      <link>/wiki/%E4%BD%BF%E7%94%A8simplehttpserver%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 24 Jul 2019 10:43:23 +0800</pubDate>
      
      <guid>/wiki/%E4%BD%BF%E7%94%A8simplehttpserver%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6/</guid>
      <description>此命令需要python支持，mac, linux默认自带，windows需要自己安装python 命令行进入文件夹，输入 python -m SimpleHttpServer 端口号（默认800</description>
    </item>
    
    <item>
      <title>linux进程、端口占用查看</title>
      <link>/wiki/maccmd/</link>
      <pubDate>Wed, 24 Jul 2019 10:38:06 +0800</pubDate>
      
      <guid>/wiki/maccmd/</guid>
      <description>查看端口占用 sudo lsof -i:端口号 netstat -anlp | grep 端口号</description>
    </item>
    
    <item>
      <title>基于yolo_v3的水印检测</title>
      <link>/post/yolo%E6%B0%B4%E5%8D%B0%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Sun, 21 Jul 2019 21:25:20 +0800</pubDate>
      
      <guid>/post/yolo%E6%B0%B4%E5%8D%B0%E6%A3%80%E6%B5%8B/</guid>
      <description>背景 近年来版权意识的提高，在使用别人图片的时候（尤其是商业领域），需要检测图片是否有别的公司的水印（ 主要针对人眼可见的水印，除去数字加密等水</description>
    </item>
    
    <item>
      <title>mac通过跳板机对服务器上传下载文件</title>
      <link>/wiki/%E8%B7%B3%E6%9D%BF%E6%9C%BA%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 10 Jul 2019 13:27:58 +0800</pubDate>
      
      <guid>/wiki/%E8%B7%B3%E6%9D%BF%E6%9C%BA%E4%BD%BF%E7%94%A8/</guid>
      <description>使用windows时，可以使用xshell通过rz,sz命令通过跳板机方便的上传、下载文件。而使用macos的scp命令比较麻烦，使用ite</description>
    </item>
    
    <item>
      <title>视频对象分割小记</title>
      <link>/post/videoseg_summary/</link>
      <pubDate>Thu, 06 Jun 2019 15:25:02 +0800</pubDate>
      
      <guid>/post/videoseg_summary/</guid>
      <description>写在前面的话，硕士研究生阶段从接触VOS到深入研究，差不多一共有两年时间。因为自己刚接触这个研究领域的时候，用深度学习做视频分割的还相对较少</description>
    </item>
    
    <item>
      <title>conda pip源</title>
      <link>/wiki/conda_pip%E6%BA%90/</link>
      <pubDate>Sun, 02 Jun 2019 19:52:40 +0800</pubDate>
      
      <guid>/wiki/conda_pip%E6%BA%90/</guid>
      <description>conda 添加清华源 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --set show_channel_urls yes conda附加库 # Conda Forge conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ # msys2 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ # bioconda conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ #menpo conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/ # pytorch conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ pip 指定清华源</description>
    </item>
    
    <item>
      <title>图像处理: 双边滤波器</title>
      <link>/post/%E5%8F%8C%E8%BE%B9%E6%BB%A4%E6%B3%A2%E5%99%A8/</link>
      <pubDate>Sat, 04 May 2019 10:50:37 +0800</pubDate>
      
      <guid>/post/%E5%8F%8C%E8%BE%B9%E6%BB%A4%E6%B3%A2%E5%99%A8/</guid>
      <description>双边滤波器 百科 &amp;ldquo;双边滤波（Bilateral Filter）是非线性滤波中的一种。这是一种结合图像的空间邻近度与像素值相似度的处理</description>
    </item>
    
    <item>
      <title>Linux之tar命令</title>
      <link>/wiki/linux%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sat, 04 May 2019 09:39:37 +0800</pubDate>
      
      <guid>/wiki/linux%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4/</guid>
      <description>tar -c: 建立压缩文档 -x: 解压 -t: 查看内容 -r: 向压缩归档文件末尾追加文件 -u: 更新压缩包中的文件 以上五个是独立的命令，压缩解压都要用到其中一个，可以和别的命</description>
    </item>
    
    <item>
      <title>Linux命令随记</title>
      <link>/wiki/linux_%E5%91%BD%E4%BB%A4%E9%9A%8F%E8%AE%B0/</link>
      <pubDate>Sat, 13 Apr 2019 15:12:08 +0800</pubDate>
      
      <guid>/wiki/linux_%E5%91%BD%E4%BB%A4%E9%9A%8F%E8%AE%B0/</guid>
      <description>记录自己操作Linux时偶尔忘记的命令 1.将某个文件夹下的文件名带某个字符串的所有文件(文件名过长)复制到指定文件夹 find -name &amp;quot;*xxx*&amp;quot; | xargs -i cp {} /home/XXX/XXX/ 2. 在使</description>
    </item>
    
    <item>
      <title>Hr_net阅读笔记</title>
      <link>/post/hr_net/</link>
      <pubDate>Sat, 13 Apr 2019 14:52:14 +0800</pubDate>
      
      <guid>/post/hr_net/</guid>
      <description>HRNet 是中科大与微软亚洲研究院今年发表的关于人体姿态估计的论文中提出的网络结构。 我不是做姿态估计的，主要是HRNet的结构对于需要跨层特征融合以</description>
    </item>
    
    <item>
      <title>剑指offer23:链表中环的入口地址</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer23%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Sun, 07 Apr 2019 18:53:24 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer23%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E5%9C%B0%E5%9D%80/</guid>
      <description>题目：给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null 思路：链表存在环，则没有尾节点. 对于链表一个指针无法解决时，考</description>
    </item>
    
    <item>
      <title>剑指offer52:两个链表的第一个公共节点</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer52%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</link>
      <pubDate>Sun, 07 Apr 2019 15:33:31 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer52%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</guid>
      <description>题目：输入两个链表，找出它们的第一个公共结点 思路：暴力法时间复杂度O(n^2). 当两个链表具有公共节点时，第一个公共节点之后的节点全部相等.</description>
    </item>
    
    <item>
      <title>剑指offer55:二叉树的深度</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer55%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</link>
      <pubDate>Sat, 06 Apr 2019 23:03:12 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer55%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</guid>
      <description>题目一：输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度 思路：求树的深</description>
    </item>
    
    <item>
      <title>图像处理: 高斯滤波器</title>
      <link>/post/%E9%AB%98%E6%96%AF%E6%BB%A4%E6%B3%A2%E5%99%A8/</link>
      <pubDate>Sat, 06 Apr 2019 12:58:48 +0800</pubDate>
      
      <guid>/post/%E9%AB%98%E6%96%AF%E6%BB%A4%E6%B3%A2%E5%99%A8/</guid>
      <description>高斯滤波是一种线性平滑滤波，适用于消除高斯噪声，广泛应用于图像处理的减噪过程, 高斯滤波就是对整幅图像进行加权平均的过程，每一个像素点的值，都</description>
    </item>
    
    <item>
      <title>剑指offer32:从上到下打印二叉树</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer32%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Fri, 05 Apr 2019 23:53:14 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer32%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>题目：从上往下打印出二叉树的每个节点，同层节点从左至右打印 思路：典型的队列使用 void PrintFromTopToBottom(TreeNode* root) { if(root==nullptr) return ; queue&amp;lt;TreeNode*&amp;gt; q; q.push(root); while(!q.empty()){ TreeNode* node = q.front(); q.pop(); cout&amp;lt;&amp;lt;node-&amp;gt;val&amp;lt;&amp;lt;&amp;quot; &amp;quot;; if(node-&amp;gt;left!=nullptr) q.push(node-&amp;gt;left); if(node-&amp;gt;right!=nullptr) q.push(node-&amp;gt;right); } } 拓展1： 分层从</description>
    </item>
    
    <item>
      <title>剑指offer30:包含min函数的栈</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer30%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</link>
      <pubDate>Fri, 05 Apr 2019 23:25:09 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer30%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</guid>
      <description>题目：定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1）. 思路：对于栈，要在O(1)时间内获</description>
    </item>
    
    <item>
      <title>剑指offer12:矩阵中的路径</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer12%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Fri, 05 Apr 2019 22:51:22 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer12%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</guid>
      <description>题目：请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左</description>
    </item>
    
    <item>
      <title>剑指offer27:树的镜像</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer27%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</link>
      <pubDate>Thu, 04 Apr 2019 23:52:48 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer27%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</guid>
      <description>题目：操作给定的二叉树，将其变换为源二叉树的镜像 如上图所示，树的镜像是将每个节点的左右子树交换，因此，对于每个节点只需要交换左右子树的指针，</description>
    </item>
    
    <item>
      <title>剑指offer26:树的子结构</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer26%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</link>
      <pubDate>Thu, 04 Apr 2019 22:58:37 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer26%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</guid>
      <description>题目:输入两棵二叉树A，B，判断B是不是A的子结构. 如上图，其中B为A的子结构. 思路: 判断是否为子树，首先需要定位到子树的根节点，然后对两颗</description>
    </item>
    
    <item>
      <title>剑指offer25:合并两个排序的链表</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer25%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 03 Apr 2019 16:58:07 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer25%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/</guid>
      <description>题目：输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则. 思路：对于两个递增的链表合并，合并后仍递增</description>
    </item>
    
    <item>
      <title>剑指offer24:反转链表</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer24%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 03 Apr 2019 00:43:52 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer24%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>题目：输入一个链表，反转链表后，输出新链表的表头. 思路一：链表反转，需将节点指向改变. 可以每次取下一个节点向之前的节点中插入，采用头插法实现</description>
    </item>
    
    <item>
      <title>剑指offer22:链表倒数第k个节点</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer22%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
      <pubDate>Tue, 02 Apr 2019 22:44:44 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer22%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
      <description>题目：输入一个链表，输出该链表中倒数第k个结点. 链表长度未知，可以西安遍历一次得到链表长度，然后可计算出移动多少步. 然后这样做相当于遍历两次</description>
    </item>
    
    <item>
      <title>剑指offer10:斐波那契数列</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer10_%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</link>
      <pubDate>Tue, 02 Apr 2019 21:41:09 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer10_%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</guid>
      <description>题目一： 求斐波那契数列的第n项. 斐波那契数列公式： $$f(0)=0$$ $$f(1)=1$$ $$f(n)=f(n-1) + f(n-2),n&amp;gt;1$$ 对于斐波那契数列，学过程序语言的应该都知道. 教学时基本都是使用它来说明递归，导致</description>
    </item>
    
    <item>
      <title>剑指offer21:调整数组顺序使奇数位于偶数前</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer21%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D/</link>
      <pubDate>Mon, 01 Apr 2019 23:33:15 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer21%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D/</guid>
      <description>题目：输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使所有奇数位于数组的前半部分，所有偶数位于数组后半部分. 思路：交换数组元素，若</description>
    </item>
    
    <item>
      <title>gitLab项目拉取及提交使用记录</title>
      <link>/wiki/gitlab%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sat, 30 Mar 2019 14:59:05 +0800</pubDate>
      
      <guid>/wiki/gitlab%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</guid>
      <description>实习接触了gitlab，遂记录项目拉取及提交的过程，方便自己查看。 一.创建分支 首先登陆gitlab，进入你要拉取的项目. 点击Branches</description>
    </item>
    
    <item>
      <title>Keras数据增强并保存到本地</title>
      <link>/post/keras_data_aug/</link>
      <pubDate>Fri, 29 Mar 2019 15:16:16 +0800</pubDate>
      
      <guid>/post/keras_data_aug/</guid>
      <description>当需要对指定文件夹下的图片进行数据增广时，使用keras的ImageDataGenerator类的flow_from_directory（）</description>
    </item>
    
    <item>
      <title>Keras多标签分类网络实现</title>
      <link>/post/keras_duofenlei/</link>
      <pubDate>Fri, 29 Mar 2019 15:07:11 +0800</pubDate>
      
      <guid>/post/keras_duofenlei/</guid>
      <description>简谈多分类与多标签分类 简单的说，输入一张图片进行分类： * 这张图片里面的物体（通常认为只有一个物体）属于某一个类，各个类别之间的概率是竞争关系</description>
    </item>
    
    <item>
      <title>Keras数据集加载小结</title>
      <link>/post/keras_dataload/</link>
      <pubDate>Tue, 26 Mar 2019 15:20:23 +0800</pubDate>
      
      <guid>/post/keras_dataload/</guid>
      <description>对于keras加载训练数据，官方上没有详说。然而网上查各种资料，写法太多，通过自己跑代码测试总结以下几条，方便自己以后使用。 总的来说kera</description>
    </item>
    
    <item>
      <title>剑指offer9:两个栈实现队列</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer9_%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</link>
      <pubDate>Fri, 22 Mar 2019 22:44:49 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer9_%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</guid>
      <description>题目：用两个栈实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。 思路：队列的特点是先进先出，单个栈为先进后出。 class Solution { public:</description>
    </item>
    
    <item>
      <title>LeetCode:开方函数sqrt实现</title>
      <link>/leetcode/lettcode%E5%BC%80%E6%96%B9%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 10 Mar 2019 15:30:15 +0800</pubDate>
      
      <guid>/leetcode/lettcode%E5%BC%80%E6%96%B9%E5%87%BD%E6%95%B0/</guid>
      <description>要求实现开方函数，面试时这个问题出现的次数还是比较多的。 一：二分查找法 对于一个给定的非负数A，它的平方根都不会大于[A/2+1],故在[0,</description>
    </item>
    
    <item>
      <title>剑指offer6:逆向打印链表</title>
      <link>/leetcode/%E9%80%86%E5%90%91%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sat, 09 Mar 2019 23:40:45 +0800</pubDate>
      
      <guid>/leetcode/%E9%80%86%E5%90%91%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</guid>
      <description>问题描述：输入一个链表的头节点，反向打印出链表. 链表结构如下 struct ListNode { int val; ListNode *next; ListNode(int x): val(x), next(NULL){ } }; 思路：链表反向打印，先进后出，考虑使用栈. class Solution { public: void printListFromTailToHead(ListNode*</description>
    </item>
    
    <item>
      <title>剑指offer16:数字的整数次方</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer16%E6%95%B0%E5%AD%97%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</link>
      <pubDate>Thu, 07 Mar 2019 22:04:04 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer16%E6%95%B0%E5%AD%97%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</guid>
      <description>题目：给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。保证base和expon</description>
    </item>
    
    <item>
      <title>剑指offer15:二进制中1的个数</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer15%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Tue, 05 Mar 2019 22:19:22 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer15%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</guid>
      <description>题目： 请实现一个函数，输入一个整数，输出该二进制中表示1的个数. 对于二进制运算，主要是按位与、或、非. 1与1相与为1，1与0相与为0. 因此,</description>
    </item>
    
    <item>
      <title>剑指offer4：二维数组中的查找</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer4%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Sun, 03 Mar 2019 20:36:38 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer4%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</guid>
      <description>问题描述：在一个二维数组中，每一行都按从做到右递增顺序排序，每一列都按从上到下递增顺序排序。输入一个二维数组与一个整数，判断数组中是否有这个</description>
    </item>
    
    <item>
      <title>剑指offer3: 数组重复数字</title>
      <link>/leetcode/%E5%89%91%E6%8C%87offer_%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97/</link>
      <pubDate>Sat, 02 Mar 2019 16:52:59 +0800</pubDate>
      
      <guid>/leetcode/%E5%89%91%E6%8C%87offer_%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97/</guid>
      <description>题目描述：在一个长度为n的数组里的所有数字都在0～n-1之间。数组中某些数字时重复的，但不知道有几个重复了，也不知道每个数字重复了几次。请找</description>
    </item>
    
    <item>
      <title>剑指offer7:重构二叉树</title>
      <link>/leetcode/%E9%87%8D%E6%9E%84%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Fri, 01 Mar 2019 19:10:54 +0800</pubDate>
      
      <guid>/leetcode/%E9%87%8D%E6%9E%84%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>题目：输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{</description>
    </item>
    
    <item>
      <title>Markdown语法</title>
      <link>/wiki/markdown%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 20 Feb 2019 17:23:49 +0800</pubDate>
      
      <guid>/wiki/markdown%E8%AF%AD%E6%B3%95/</guid>
      <description>标题 1.使用=和_标记一级和二级标题 一级标题 ======= 二级标题 ——————— 2.使用#号 # 一级标题 ## 二级标题 ### 三级标题 段落 换行：两个以上的空格加回车</description>
    </item>
    
    <item>
      <title>python下mnist数据集转化为图片</title>
      <link>/post/mnist%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%AC%E5%9B%BE%E7%89%87/</link>
      <pubDate>Sat, 22 Dec 2018 15:37:02 +0800</pubDate>
      
      <guid>/post/mnist%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%AC%E5%9B%BE%E7%89%87/</guid>
      <description>环境：tensorflow 代码如下 from tensorflow.examples.tutorials.mnist import input_data from scipy import misc import numpy as np import os mnist = input_data.read_data_sets(&#39;MNIST_data/&#39;,one_hot=True) result_path =&#39;mnist_data\\train&#39; def onehot2id(labels): return list(labels).index(1) if not os.path.exists(result_path): os.mkdir(result_path) labels_txt = open(&#39;train_labs.txt&#39;,&#39;w&#39;) for i in range(len(mnist.train.images)): img_vec = mnist.train.images[i,:] img_arr = np.reshape(img_vec,[28,28]) img_lab = mnist.train.labels[i,:] img_id = onehot2id(img_lab) labels_txt.write(str(i)+&#39; &#39;+str(img_id)+&#39;\n&#39;) img_path = os.path.join(result_path,str(i)+&#39;.png&#39;) misc.imsave(img_path,img_arr) 以</description>
    </item>
    
    <item>
      <title>监督分类之：KNN算法</title>
      <link>/post/knn/</link>
      <pubDate>Sat, 22 Dec 2018 15:34:07 +0800</pubDate>
      
      <guid>/post/knn/</guid>
      <description>KNN简介 K近邻（K-Nearest Neighbor）学习是一种简单的监督学习方法。方法流程主要是：对于给定的测试样本，基于某种距离度量找出</description>
    </item>
    
    <item>
      <title>Pyplot tutorial翻译文档</title>
      <link>/wiki/pyplot%E6%96%87%E6%A1%A3/</link>
      <pubDate>Fri, 21 Dec 2018 15:39:00 +0800</pubDate>
      
      <guid>/wiki/pyplot%E6%96%87%E6%A1%A3/</guid>
      <description>pyplot简介 matplotlib.pyplot是一个类似于MATLAB风格的的命令行式函数的集合。每一个pyplot函数都是在一个Fig</description>
    </item>
    
    <item>
      <title>Numpy使用GPU加速</title>
      <link>/wiki/numpy&#43;gpu%E5%8A%A0%E9%80%9F/</link>
      <pubDate>Fri, 21 Dec 2018 15:32:04 +0800</pubDate>
      
      <guid>/wiki/numpy&#43;gpu%E5%8A%A0%E9%80%9F/</guid>
      <description>在跑完mnist的KNN分类后，跑的挺慢，突然想有没有GPU的numpy的呢，上网查了查，才知道原生的numpy没有实现（不应该啊。。。），</description>
    </item>
    
    <item>
      <title>模版匹配之相关匹配</title>
      <link>/post/%E7%9B%B8%E5%85%B3%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Thu, 20 Dec 2018 15:44:06 +0800</pubDate>
      
      <guid>/post/%E7%9B%B8%E5%85%B3%E5%8C%B9%E9%85%8D/</guid>
      <description>模板匹配 最近准备把学过的一些知识整理写成博客，加深印象。 模板匹配是一种最原始、最基本的模式识别方法，研究某一特定对象物的图案位于图像的什么地</description>
    </item>
    
    <item>
      <title>线性拟合笔记之：Ransac算法</title>
      <link>/post/ransac/</link>
      <pubDate>Wed, 19 Dec 2018 15:52:22 +0800</pubDate>
      
      <guid>/post/ransac/</guid>
      <description>关于Ransac算法 RANSAC为Random Sample Consensus，即随机采样一致性算法，是根据一组包含异常数据的样本数据集，计算出数据的数</description>
    </item>
    
    <item>
      <title>线性拟合笔记之：最小二乘法</title>
      <link>/post/linersqur/</link>
      <pubDate>Tue, 18 Dec 2018 15:57:45 +0800</pubDate>
      
      <guid>/post/linersqur/</guid>
      <description>关于最小二乘法 以下是百度百科的解释：最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小</description>
    </item>
    
    <item>
      <title>Ubuntu &#43; Python下libsvm使用小结</title>
      <link>/post/libsvm%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Wed, 28 Nov 2018 16:24:49 +0800</pubDate>
      
      <guid>/post/libsvm%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</guid>
      <description>关于libsvm libsvm是台湾大学林智仁(Chih-Jen Lin)教授等开发，它主要用于分类(支持二分类和多分类)和回归，主页主页，下载</description>
    </item>
    
    <item>
      <title>基于Keras图像相似度计算孪生网络</title>
      <link>/post/keras_simi/</link>
      <pubDate>Mon, 12 Nov 2018 16:32:32 +0800</pubDate>
      
      <guid>/post/keras_simi/</guid>
      <description>import keras from keras.layers import Input,Dense,Conv2D from keras.layers import MaxPooling2D,Flatten,Convolution2D from keras.models import Model import os import numpy as np from PIL import Image from keras.optimizers import SGD from scipy import misc root_path = os.getcwd() train_names = [&#39;bear&#39;,&#39;blackswan&#39;,&#39;bus&#39;,&#39;camel&#39;,&#39;car&#39;,&#39;cows&#39;,&#39;dance&#39;,&#39;dog&#39;,&#39;hike&#39;,&#39;hoc&#39;,&#39;kite&#39;,&#39;lucia&#39;,&#39;mallerd&#39;,&#39;pigs&#39;,&#39;soapbox&#39;,&#39;stro&#39;,&#39;surf&#39;,&#39;swing&#39;,&#39;train&#39;,&#39;walking&#39;] test_names = [&#39;boat&#39;,&#39;dance-jump&#39;,&#39;drift-turn&#39;,&#39;elephant&#39;,&#39;libby&#39;] def load_data(seq_names,data_number,seq_len): #生成图片对 print(&#39;loading data.....&#39;) frame_num = 51 train_data1 = [] train_data2 = [] train_lab = [] count = 0 while count &amp;lt; data_number:</description>
    </item>
    
    <item>
      <title>Keras 猫狗二分类</title>
      <link>/post/kdog_cat/</link>
      <pubDate>Sun, 11 Nov 2018 16:36:27 +0800</pubDate>
      
      <guid>/post/kdog_cat/</guid>
      <description>import keras from keras.models import Sequential from keras.layers import Dense,MaxPooling2D,Input,Flatten,Convolution2D,Dropout,GlobalAveragePooling2D from keras.optimizers import SGD from keras.callbacks import TensorBoard,ModelCheckpoint from PIL import Image import os import numpy as np from scipy import misc root_path = os.getcwd() def load_data(): tran_imags = [] labels = [] seq_names = [&#39;cat&#39;,&#39;dog&#39;] for seq_name in seq_names: frames = sorted(os.listdir(os.path.join(root_path,&#39;data&#39;,&#39;train_data&#39;, seq_name))) for frame in frames: imgs = [os.path.join(root_path, &#39;data&#39;, &#39;train_data&#39;, seq_name, frame)] imgs = np.array(Image.open(imgs[0])) tran_imags.append(imgs) if</description>
    </item>
    
    <item>
      <title>深度学习数据利器，批量图片下载,github项目google_images_download</title>
      <link>/wiki/google_image_download%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 10 Oct 2018 16:43:55 +0800</pubDate>
      
      <guid>/wiki/google_image_download%E4%BD%BF%E7%94%A8/</guid>
      <description>google_images_download是GitHub上拥有3000+ star的项目，最近自己在跑一些网络，需要一些数据，网络上也有一些</description>
    </item>
    
    <item>
      <title>Imagenet数据集类别标签和对应的英文中文对照表</title>
      <link>/wiki/imagenet%E6%95%B0%E6%8D%AE%E9%9B%86label%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Mon, 08 Oct 2018 16:50:36 +0800</pubDate>
      
      <guid>/wiki/imagenet%E6%95%B0%E6%8D%AE%E9%9B%86label%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E6%AF%94/</guid>
      <description>预测结果输出one-hot类型，最大概率的下标即为对于类别号 0: &#39;tench, Tinca tinca&#39;, 丁鲷(鱼) 1: &#39;goldfish, Carassius auratus&#39;, 金鱼，鲫鱼 2: &#39;great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias&#39;, 大白鲨 3: &#39;tiger shark, Galeocerdo cuvieri&#39;, 虎鲨 4:</description>
    </item>
    
    <item>
      <title>图像相似度之PSNR与SSIM小结</title>
      <link>/post/psnr/</link>
      <pubDate>Wed, 03 Oct 2018 16:55:08 +0800</pubDate>
      
      <guid>/post/psnr/</guid>
      <description>PSNR（Peak Signal to Noise Ratio）：峰值信噪比 使用局部均值误差来判断差异，对于两个H*W*C的图像，I1,I2 其中n为采样值的比特数，比如</description>
    </item>
    
    <item>
      <title>图像联通区域标记</title>
      <link>/post/%E5%9B%BE%E5%83%8F%E8%BF%9E%E9%80%9A%E5%8C%BA%E5%9F%9F%E6%A0%87%E8%AE%B0/</link>
      <pubDate>Fri, 21 Sep 2018 17:01:55 +0800</pubDate>
      
      <guid>/post/%E5%9B%BE%E5%83%8F%E8%BF%9E%E9%80%9A%E5%8C%BA%E5%9F%9F%E6%A0%87%E8%AE%B0/</guid>
      <description>由于最近做实验用到二值图像连通区域（八连通）标记，刚开始的时候为了验证算法有效性，用了递归的方法（太慢了，而且图像一大就容易栈溢出），最后查</description>
    </item>
    
    <item>
      <title></title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>  &amp;nbsp &amp;nbsp Personal info  Master/Computer Science, Beijing Jiaotong University Github：🔗 Job：Algorithm engineer  </description>
    </item>
    
    <item>
      <title></title>
      <link>/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/links/</guid>
      <description> 工具网站  Keras Model Zoo opencv 谷歌colab平台 paper with code 机器之心 SOTA模型收集 CVPR, ICCV 论文集 tensorflow org pytorch cmake 使用指南 arxiv中科院镜像 scikit-learn 牛津大学视觉组 网络可视化netron triton server doc 数据集 pascal voc
 open images
 ADE 20k
 DAVIS
  博客、论坛  machinelearningmastery pyimagesearch medium google AI blog  Art  gallerix 世界油画集  </description>
    </item>
    
    <item>
      <title>Hadoop命令记录</title>
      <link>/wiki/hadoop%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/wiki/hadoop%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</guid>
      <description>1.列出指定目录下文件 -ls haddop fs -ls /dir haddop fs -ls -R /dir 2.将本地文件放到hdfs文件系统中 -put hadoop fs -put &amp;lt;local file&amp;gt; &amp;lt;hdfs file&amp;gt; hadoop fs -put &amp;lt;local file or dir&amp;gt; &amp;lt;hdfs dir&amp;gt; #将键盘输入录入到hdfs文</description>
    </item>
    
  </channel>
</rss>